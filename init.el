(setq mac-command-modifier 'meta)

(require 'package)

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/")
             t)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/")
             t)

(package-initialize)

;; Set default height
(setq initial-frame-alist
      '((width . 150) (height . 65)))

;; default/sebsequent window
(setq default-frame-alist
      '((width . 150) (height . 60)))

(tool-bar-mode -1)

;; Set a directory for temporary/state related files.
(defvar dotfiles-dirname
  (file-name-directory (or load-file-name
                           (buffer-file-name)))
  "The directory where this code is running from.
   Ideally, this will be ~/.emacs.d.")

(defvar tempfiles-dirname
  (concat dotfiles-dirname "temp-files/")
  "A sub-directory to hold temporary files generated by Emacs.")

;; Create the temp-files folder if necessary.
(make-directory tempfiles-dirname t)


;; Move Emacs state into the temp folder we've created.
(setq ido-save-directory-list-file (concat tempfiles-dirname "ido.last")
      recentf-save-file (concat tempfiles-dirname "recentf")
      save-place-file (concat tempfiles-dirname "places")
      backup-directory-alist `(("." . ,(concat tempfiles-dirname "backups"))))

;;; Company - complete anything
(require 'company)
;; Enable company everywhere
(add-hook 'after-init-hook 'global-company-mode)
(setq-default company-lighter " cmp")
(define-key company-active-map [tab] 'company-complete)
(define-key company-active-map (kbd "TAB") 'company-complete)

;;; Helm - Handy completion and narrowing
;; Explicitly turn off global `helm-mode'
(require 'helm-config)
(helm-mode 1)


(defun helm-do-grep-ag-with-directory (arg)
 "Do `helm-do-grep-ag' with `default-directory' set to D."
 (interactive "P")
 (let ((default-directory (expand-file-name (vc-root-dir))))
   (call-interactively 'helm-do-grep-ag arg)))

(defun helm-grep-it (arg)
  "Run the_silver_search with `helm-do-grep.
Argument ARG is the prefix argument which when not supplied causes `vc-root-dir'
to be the default root.  Otherwise current-directory is the default root."
  (interactive "P")
  (if arg
      (call-interactively 'helm-do-ag-project-root)
    ;; Now let it be a bit more convenient.
    (let* ((default-directory (expand-file-name (or (ignore-errors (vc-root-dir))
                                                    default-directory)))
           (ag-type-list '((emacs-lisp-mode . "--elisp")
                           (clojure-mode . "--clojure")))
           (ag-type (assoc-default major-mode ag-type-list)))
      (helm-grep-ag-1 default-directory (list ag-type)))))


(global-set-key (kbd "M-N") 'helm-grep-it)
;;; Use C-c C-f to enable follow mode while running search

;; Various useful key-bindings (other than Helm Defaults)
(global-set-key (kbd "C-x c r") nil) ; unset this because I plan to
                                        ; use it as a prefix key.
(global-set-key (kbd "C-x c r b") 'helm-filtered-bookmarks)
(global-set-key (kbd "C-x c r r") 'helm-regexp)
(global-set-key (kbd "C-x c C-b") 'helm-mini)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x c SPC") 'helm-all-mark-rings)
(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
(global-set-key (kbd "C-x c r i") 'helm-register)
;; Useful defaults: C-x c i, C-x c I

;;; Avy
(require 'avy)

(global-set-key (kbd "M-g g") 'avy-goto-line)
(global-set-key (kbd "M-g SPC") 'avy-goto-word-1)
(avy-setup-default)

;;; Paredit
(eval-after-load 'paredit
  '(progn
     ;; Unbind `M-s`
     (define-key paredit-mode-map (kbd "M-s") nil)
     (define-key paredit-mode-map (kbd "C-M-s") 'paredit-splice-sexp)))
(add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
(eval-after-load 'clojure-mode
  '(progn (add-hook 'clojure-mode-hook 'enable-paredit-mode)))
(eval-after-load 'cider-repl
  '(progn (add-hook 'cider-repl-mode-hook 'enable-paredit-mode)))


(setq ring-bell-function 'ignore)

;; Window numbering mode
(require 'window-numbering)
(window-numbering-mode 1)

;;; Cider
(eval-after-load 'cider-mode
  '(progn
     (defun cider-repl-prompt-on-newline (ns)
       "Return a prompt string with newline.
NS is the namespace information passed into the function by
cider."
       (concat ns ">\n"))

     (setq cider-repl-history-file (concat tempfiles-dirname
                                           "cider-history.txt")
           cider-repl-history-size most-positive-fixnum
           cider-repl-wrap-history t
           cider-repl-prompt-function 'cider-repl-prompt-on-newline
           nrepl-buffer-name-separator "-"
           nrepl-buffer-name-show-port t
           nrepl-log-messages t
           cider-annotate-completion-candidates t
           cider-completion-annotations-include-ns 'always
           cider-show-error-buffer 'always
           cider-prompt-for-symbol nil)

     (add-hook 'cider-mode-hook 'eldoc-mode)))

;;; Clj Refactor
(eval-after-load 'clj-refactor
  '(progn
     (defun turn-on-clj-refactor ()
       (clj-refactor-mode 1)
       (cljr-add-keybindings-with-prefix "C-c m"))

     (setq cljr-favor-prefix-notation nil)

     (eval-after-load 'clojure-mode
       '(progn
          (add-hook 'clojure-mode-hook 'turn-on-clj-refactor)))))


;; Load zenburn theme
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'zenburn t)

;; Set font
(set-default-font "source code pro")

;; All ido things
(require 'ido)

(ido-mode t)
(ido-everywhere)
(setq ido-enable-flex-matching t
      ido-use-virtual-buffers t
      ido-create-new-buffer 'always
      ido-use-filename-at-point t)
(add-hook 'ido-make-buffer-list-hook 'ido-summary-buffers-to-end)


(defadvice completing-read
  (around ido-steroids activate)
  "ido on steroids :D from EmacsWiki"
  (if (boundp 'ido-cur-list)
      ad-do-it
    (setq ad-return-value
          (ido-completing-read
           prompt
           (all-completions "" collection predicate)
           nil require-match initial-input hist def))))


;; exec-path picks up wrong git without this line
(setq exec-path (append '("/usr/local/bin") exec-path))


;; Magit key bindings
(global-set-key (kbd "C-x g") 'magit-status)

;; Smex
(require 'smex) ; Not needed if you use package.el
;;(smex-initialize) ; Can be omitted. This might cause a (minimal) delay
					; when Smex is auto-initialized on its first run.
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)


;; Delete selcted area
(delete-selection-mode 1)

;; Yes or no alias
(defalias 'yes-or-no-p 'y-or-n-p)

;; pop mark
(global-set-key (kbd "M-j") 'pop-to-mark-command)

;;Do not nest requires
(setq cljr-favor-prefix-notation nil)

(defun vm/sudo-edit (&optional arg)
  "Edit as root"
  (interactive "p")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

;; use this in your init.el for nice pretty printing
(setq cider-repl-use-pretty-printing nil)

;; Clj Refactor key binding prefix
(cljr-add-keybindings-with-prefix "C-c C-r")

;; Faster pretty printing
;; (setq cider-pprint-fn "fipp.clojure/pprint")
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (hc-zenburn-theme zenburn-theme window-numbering smex magit-rockstar magit-gitflow magit-gerrit magit-find-file magit-filenotify magit-annex magic-filetype ido-ubiquitous helm-ag exec-path-from-shell darktooth-theme company color-theme-modern clj-refactor avy))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
